<?php

	# VISUALIZADOR HTML

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);

	$component_alias_css = isset($propiedades->alias_component_tipo) ? ' alias_'.$propiedades->alias_component_tipo : '';

	print '<div class="wrap_component css_wrap_autocomplete wrap_component_'.$modo.' wrap_component_'.$tipo. $component_alias_css.' tooltip_active" ';
	if ($modo==='search') {
	print 'title="'.search_development2::search_options_title( $this->search_operators_info() ).'" ';
	}
	print "id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-lang=\"{$lang}\" ";
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-parent=\"{$parent}\" ";
	print "data-modo=\"{$modo}\" ";
	print "data-from_modo=\"{$from_modo}\" ";
	print "data-dato='{$dato_json}' ";
	print "data-component_name=\"{$component_name}\" ";
	print 'data-component_info=\''.$component_info.'\' ';

	// service autocomplete options
	print "data-search_sections='". json_encode($search_sections)."' ";

	print "data-ar_target_section_tipo='". json_encode($ar_target_section_tipo)."' ";
	print "data-tipo_to_search='{$tipo_to_search}' ";
	print "data-filter_by_list='{$json_filter_by_list}' ";

	print "data-q_operator='".$q_operator."' ";

	print 'data-search_query_object=\''.$json_search_query_object.'\' ';
	print 'data-divisor="'. $divisor .'" ';
	print 'data-limit="'. $limit .'" ';
	print '>';


	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);


	# CONTENIDO (INPUT)
	$html_content = '';
	switch(true) {

		case ($permissions === 0) :
				$html_content .= "";
				break;

		case ($permissions === 1) :
				$html_content .= $valor;
				break;

		case ($permissions>=2) :

				// Button change mode
					if($modo!=='search' && $from_modo!=='edit' && $from_modo!=='tool_description'){
						$html_content .= "<div class=\"css_autocomplete_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
					}

				// Custom css
					$css_autocomplete_valor				= '';
					$css_component_options_container 	= 'component_options_container';
					$css_autocomplete_wrapper 			= '';
					switch (true) {
						case ($modo==='search'):
							$css_autocomplete_valor 			.= ' in_search_mode';
							$css_component_options_container 	= 'component_options_container_edit_in_list';
							break;
						case ($modo!=='edit' || $from_modo!=='edit'):
							$css_autocomplete_valor				= 'css_autocomplete_valor_edit_in_list';
							$css_component_options_container 	= 'component_options_container_edit_in_list';
							$css_autocomplete_wrapper 			= 'autocomplete_wrapper_edit_list';
							$html_label 	 					= '';
							break;

						default:
							# code...
							break;
					}


				// Options
					$autosearch_options_html = '';
					$autosearch_options_js 	 = '';
					$autosearch_options_id 	 = 'autosearch_options_' . $section_tipo .'_'. $tipo .'_'. $parent;
					if ($modo==='search') {
						$autosearch_options_id .= '_'.microtime(true);
					}
					$autosearch_options_html .= '<div id="' . $autosearch_options_id . '" class="autosearch_options hide" data-tipo="'.$tipo.'">';


					// Filter_by_list
						if ($filter_by_list!==false) {
							// Calculate ar elements to show in filter
							$ar_elements = component_relation_common::get_filter_list_data($filter_by_list);

							$filter_list_options = new stdClass();
								$filter_list_options->target_id 	= $autosearch_options_id;
								$filter_list_options->tipo 			= $tipo;
								$filter_list_options->section_tipo 	= $section_tipo;
								$filter_list_options->ar_elements 	= $ar_elements;

							$autosearch_options_js .= 'service_autocomplete.build_filter_list('.json_encode($filter_list_options).');';
						}//end if ($filter_by_list!==false)

					// Filter by fields (advanced search)
						$filter_by_fields = false;
						// Calculate ar elements to show in filter
						$ar_elements = component_relation_common::get_filter_fields_data($search_query_object, $propiedades);
						if (!empty($ar_elements)) {
							$filter_by_fields = true;

							$filter_fields_options = new stdClass();
								$filter_fields_options->tipo 		 = $tipo;
								$filter_fields_options->section_tipo = $section_tipo;
								$filter_fields_options->ar_elements  = $ar_elements;
								$filter_fields_options->op_label_or  = label::get_label('o');
								$filter_fields_options->op_label_and = label::get_label('y');
								$filter_fields_options->operator  	 = isset($propiedades->source->operator) ? $propiedades->source->operator : 'or';
								$filter_fields_options->q_split  	 = isset($propiedades->source->q_split) ? (bool)$propiedades->source->q_split : true;
								$filter_fields_options->target_id 	 = $autosearch_options_id;

							$autosearch_options_js .= 'service_autocomplete.build_source_search_selector('.json_encode($filter_fields_options).');';
						}
					$autosearch_options_html .= "</div>";//end autosearch_options


				// Operator
					if ($modo==='search') {
						$html_content .= '<input class="q_operator" type="text" value="'.$q_operator.'" ';
						$html_content .= "onchange=\"component_common.fix_dato(this,'{$component_name}')\" ";
						$html_content .=' />';
					}


				// Rows
					$html_content .= '<ul class="css_autocomplete_valor '.$css_autocomplete_valor.'" data-role="autocomplete_valor">';
					$i=0;
					foreach ($ar_valor as $value_obj) {

						$current_locator  		= $value_obj->value;
						$current_section_id 	= $current_locator->section_id;
						$current_section_tipo 	= $current_locator->section_tipo;
						$current_value 			= $value_obj->label;
						$current_locator_json 	= json_encode($current_locator);

						# Permissions of target section. Apply to current buttons
						$open_section_tipo_permissions = common::get_permissions($current_section_tipo,$current_section_tipo);

						$html_content .= '<li>';

						// Button delete
							if (!$in_time_machine) {
								$html_content .= "<div class=\"icon_bs link css_autocomplete_button_delete edit_hidden\" ";
								$html_content .= "onclick=\"component_autocomplete.delete(this)\" ";
								$html_content .= "title=\"$label $parent\" ";
								$html_content .= "data-current_value='{$current_locator_json}' ";
								$html_content .= "data-role=\"autocomplete_button_delete\" ";
								$html_content .= "></div>";
							}

						// Value. String resolved to show
							$html_content .= '<span>'.$current_value.'</span>';

						// Button edit
							if (!$in_time_machine && $open_section_tipo_permissions>=2) {
								$html_content .= "<div class=\"icon_bs link edit_autocomplete edit_autocomplete_row edit_hidden\" ";
								$html_content .= "onclick=\"component_autocomplete.open_element(this)\" ";
								$html_content .= "data-section_tipo=\"$current_section_tipo\" ";
								$html_content .= "data-section_id=\"$current_section_id\" ";
								$html_content .= "data-modo=\"edit\" ";
								$html_content .= "data-menu=\"0\" ";
								$html_content .= "></div>";
							}

						// Dataframe manager
							if (isset($ar_dataframe_obj[$i])) {
								$html_content .= $ar_dataframe_obj[$i]->get_html();
							}

						// Semantics. Mandatory vars to create semantic_node column
							if(!empty($this->semantic_nodes)) {
								$html_content .= "<div class=\"autocomplete_semantic_nodes\">";
								foreach ((array)$this->semantic_nodes as $semantic_node_tipo) {

									$semantic_node_title = RecordObj_dd::get_termino_by_tipo($semantic_node_tipo);

									$ds_key 			 = $semantic_node_tipo;
									$semantic_wrapper_id = $ds_key.'_'.$current_locator->section_tipo.'_'.$current_locator->section_id;
									$ds_element 		 = isset($current_locator->ds->$ds_key) ? $current_locator->ds->$ds_key : null;

									ob_start();
									include(DEDALO_LIB_BASE_PATH . '/tools/tool_semantic_nodes/html/tool_semantic_nodes_node.phtml');
									$html_content .= ob_get_clean();

								}
								$html_content .= "</div>";
							}

						$html_content .= '</li>';
						$i++;
					}
					$html_content .= '</ul>';


				// Buttons_and_fields
					if ($in_time_machine!==true) {

						# BUTTONS_AND_FIELDS
						$html_content .= '<div class="buttons_and_fields">';

							#$url_edit = "?t=".reset($ar_target_section_tipo).'&menu=0';	// To first section only  onclick=\"window.open('$url_edit')\"
							$open_section_tipo = reset($ar_target_section_tipo);

							# BUTTON SHOW OPTIONS
							if ($filter_by_list!==false || ($filter_by_fields!==false && count($ar_elements)>1)) {
								$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\" data-tipo=\"$tipo\" onclick=\"service_autocomplete.toggle_options(this)\"></div>";
							}

							# Permissions of target section. Apply to current buttons
							$open_section_tipo_permissions = common::get_permissions($open_section_tipo,$open_section_tipo);
							if ($open_section_tipo_permissions>=2) {

								#
								# BTN NEW ELEMENT
								$html_content .= "<div class=\"icon_bs link new_autocomplete edit_hidden\" ";
								$html_content .= "onclick=\"component_autocomplete.new_element(this,'$id_wrapper')\" ";
								$html_content .= "data-target_section_tipo=\"".reset($ar_target_section_tipo)."\" ";
								$html_content .= "></div>";

								#
								# BTN EDIT WHOLE SECTION
								$open_section_id   = null;
								$html_content .= "<a href=\"javascript:;\" class=\"icon_bs link edit_hidden edit_autocomplete\" onclick=\"component_autocomplete.open_element(this)\" ";
								$html_content .= "data-section_tipo=\"$open_section_tipo\" ";
								$html_content .= "data-section_id=\"$open_section_id\" ";
								$html_content .= "data-modo=\"list\" ";
								$html_content .= "data-menu=\"1\" ";
								$html_content .= "></a>";

							}

						$html_content .= '</div>';//end div buttons_and_fields
					}//end if (!$in_time_machine) {


				// Button show options
					#	if ($filter_by_list!==false || $filter_by_fields!==false) {
					#		$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\" data-tipo=\"$tipo\" onclick=\"component_autocomplete.toggle_options(this)\"></div>";
					#	}


				// Input data hidden
					$html_content .= "<input type=\"text\" class=\"css_autocomplete_dato_hidden debug_info\" ";
					$html_content .= "name=\"{$input_name}\" ";
					$html_content .= "value='{$dato_json}' ";
					$html_content .= "data-role=\"dato_hidden\" ";
					$html_content .= "data-tipo=\"{$tipo}\" "; // Important for discriminate autocomplete inside autocomplete
					$html_content .= "disabled=\"disabled\" ";
					$html_content .= "/>";


				// Component options container
					$html_content .= '<div class="'.$css_component_options_container.'">';
						#
						# NEW_ELEMENT_CONTAINER ajax loads here
							$html_content .= "<div class=\"new_element_container\" data-role=\"new_element_container\" data-tipo=\"{$tipo}\"></div>";

						#
						# AUTOSEARCH_OPTIONS (add after button)
							$html_content .= $autosearch_options_html;

						#
						# AUTOCOMPLETE SERVICE
							$autocomplete_wrapper_id = 'aw_' . $identificador_unico;
							$css_autocomplete_wrapper .= ($modo==='search') ? ' in_search_mode' : '';
							$html_content .= '<div class="autocomplete_wrapper '.$css_autocomplete_wrapper.'" id="'.$autocomplete_wrapper_id.'"></div>';
					$html_content .= '</div>';


				// JS Init component
					$html_content .= '<script>';
					# Init component
					$init_options = new stdClass();
						$init_options->component_name 	= $component_name;
						$init_options->wrapper_id 		= $id_wrapper;
						$init_options->cookie_name 		= isset($cookie_name) ? $cookie_name : null;
						$init_options->limit 			= $limit;
						$init_options->uid 				= $identificador_unico;
					$html_content .= 'component_common.init('.json_encode($init_options).');';
					$html_content .= $autosearch_options_js; // Additional js calls
					$html_content .= '</script>';


				#######

				// Debug info
					if(SHOW_DEBUG) {
						#$html_content .= " <span class=\"css_span_debugger\" id=\"debugger_{$tipo}\" >{$debugger}</span>";
						$html_content .= "<span class=\"debug_info\" id=\"debugger_{$tipo}\">";
						#$html_content .= json_encode($search_fields, JSON_PRETTY_PRINT);
						$html_content .= "<pre>";
						$json_indented_by_2 = preg_replace('/^(  +?)\\1(?=[^ ])/m', '$1', json_encode($search_query_object, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
						$html_content .= $json_indented_by_2;
						$html_content .= "</pre>";
						$html_content .= "</span>";
					}
				break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	print $html_label;
	print $html_content;


	print '</div>'; //wrap

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);


