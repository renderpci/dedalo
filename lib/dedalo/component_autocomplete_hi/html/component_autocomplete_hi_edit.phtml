<?php

	# VISUALIZADOR HTML

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);

	$component_alias_css = isset($propiedades->alias_component_tipo) ? ' alias_'.$propiedades->alias_component_tipo : '';

	print '<div class="wrap_component css_wrap_'.$component_name.' wrap_component_'.$modo.' wrap_component_'.$tipo. $component_alias_css.' tooltip_active" ';	
	if ($modo==='search') {
	print 'title="'.search_development2::search_options_title( $this->search_operators_info() ).'" ';
	}
	print "id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-lang=\"{$lang}\" ";	
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-parent=\"{$parent}\" ";	
	print "data-modo=\"{$modo}\" ";
	print "data-from_modo=\"{$from_modo}\" ";	
	print "data-dato='".json_encode($dato)."' ";
	print "data-component_name=\"{$component_name}\" ";
	print "data-component_info='{$component_info}' ";			
	
	// service autocomplete options
	print "data-search_sections='". json_encode($search_sections)."' ";
	
	print 'data-relation_type="'.$relation_type.'" ';

	print 'data-q_operator="'.$q_operator.'" ';

	print 'data-search_query_object=\''.$json_search_query_object.'\' ';	
	print 'data-divisor="'. $divisor .'" ';
	print 'data-limit="'. $limit .'" ';
	print '>';

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_content = '';
	switch(true) {

		case ($permissions === 0) :
			$html_content .= "";
			break;

		case ($permissions === 1) :
			$html_content .= $valor;
			break;

		case ($permissions>=2) :

			// Button change mode
				if($modo !== 'edit_in_list'){
					if($modo!=='search' && $from_modo!=='edit'){
						$html_content .= "<div class=\"css_autocomplete_hi_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
					}
				}				

			// search mode
				$in_search_mode_css = ($modo==='search') ? 'in_search_mode' : '';
				$cookie_name 		= 'toponymy_list_'.$section_tipo .'_'. $tipo;

			// Input data hidden
				$html_content .= "<input type=\"text\" name=\"{$input_name}\" class=\"css_autocomplete_hi_dato_hidden debug_info\" ";				
				$html_content .= "value='".$dato_json."' ";
				$html_content .= "data-tipo=\"{$tipo}\" ";
				// ar_link_fields. Used for geolocation propagation value
				if(!empty($ar_link_fields) && $ar_link_fields !== '[]'){
					$html_content .= "data-link_fields='{$ar_link_fields}' ";
				}
				$html_content .= "data-role=\"dato_hidden\" ";
				$html_content .= "disabled=\"disabled\" ";
				$html_content .= "/>";

			// q operator
				if ($modo==='search') {
					$html_content .= '<input class="q_operator" type="text" value="'.$q_operator.'" ';
					$html_content .= "onchange=\"component_common.fix_dato(this,'{$component_name}')\" ";
					$html_content .=' />';
				}

			// Rows
				$html_content .= '<ul class="css_autocomplete_hi_valor '.$in_search_mode_css.'">';
				foreach ($ar_valor as $current_value => $value) {
	
					$html_content .= '<li>';

					// locator
						$locator = json_decode($current_value);

					// Button delete
						switch ($source_mode) {
							case 'slave':	
								// No delete button
								break;
							default:
								$html_content .= "<div class=\"icon_bs link css_autocomplete_hi_button_delete edit_hidden\" ";
								$html_content .= "onclick=\"component_autocomplete_hi.delete(this)\" ";
								$html_content .= "data-tipo=\"{$tipo}\" ";
								$html_content .= "data-current_value='$current_value' ";
								$html_content .= "data-role=\"autocomplete_hi_button_delete\" ";
								$html_content .= "title=\"$label $parent\" ";
								$html_content .= "></div>";
								break;
						}

					// Value. String resolved to show
						$value = strip_tags($value);
						$html_content .= '<span>'.$value.'</span>';

					// button edit
						$html_content .= '<div class="icon_bs link edit_autocomplete_hi edit_autocomplete_hi_row edit_hidden" onclick="component_autocomplete_hi.open_element(this)" data-section_tipo="'.$locator->section_tipo.'" data-section_id="'.$locator->section_id.'"></div>';
						

					$html_content .= '</li>';
				}
				$html_content .= '</ul>';								

			// Source mode switch
				// Button tree build html
					$hierarchy_types_json 	 = json_encode( array_values((array)$hierarchy_types) );
					$hierarchy_sections_json = json_encode( array_values((array)$search_sections) );

					$button_tree = '';
					$button_tree .= "<div class=\"icon_bs link new_autocomplete_hi edit_hidden\" ";
					$button_tree .= "onclick=\"component_common.open_ts_window(this)\" ";
					$button_tree .= "data-id_wrapper=\"$id_wrapper\" ";
					$button_tree .= "data-component_name=\"$component_name\" ";
					$button_tree .= "data-hierarchy_types='{$hierarchy_types_json}' ";
					$button_tree .= "data-hierarchy_sections='{$hierarchy_sections_json}' ";
					$button_tree .= "data-hierarchy_terms='{$hierarchy_terms_json}' ";
					$button_tree .= "></div>";
				switch ($source_mode) {

					case 'slave':
						// Nothing to do
						break;
					case 'tree':
						# BTN NEW TREE ELEMENT
						$html_content .= $button_tree;
						break;
					case 'mix':
						# BTN NEW TREE ELEMENT
						$html_content .= $button_tree;
					case 'autocomplete':
					default:

						// buttons_and_fields
							$html_content .= '<div class="buttons_and_fields">';

								// Button toggle options
								$html_content .= "<div class=\"icon_bs autocomplete_list_button_options toponymy_list_button_options edit_hidden {$in_search_mode_css}\" ";
								$html_content .= "onclick=\"service_autocomplete.toggle_search_sections_list(this)\">";
								$html_content .= "</div>";

							$html_content .= '</div>';//end div buttons_and_fields
						

						// autosearch_options
							$autosearch_options_html = '';					
							$autosearch_options_js 	 = '';
							$autosearch_options_id 	 = 'autosearch_options_' . $section_tipo .'_'. $tipo .'_'. $parent;
							if ($modo==='search') {
								$autosearch_options_id .= '_'.microtime(true);
							}
							$autosearch_options_html .= '<div id="' . $autosearch_options_id . '" class="autosearch_options'.$in_search_mode_css.'" data-tipo="'.$tipo.'">';
							#$html_content .= '<div class="component_options_container '.$in_search_mode_css.'">';
								// search_sections list
									if ($ar_filter_options!==false) {										
										// Calculate ar elements to show in filter
										$ar_elements = $ar_filter_options;
	
										$filter_list_options = new stdClass();
											$filter_list_options->target_id 	= $autosearch_options_id;
											$filter_list_options->tipo 			= $tipo;
											$filter_list_options->section_tipo 	= $section_tipo;
											$filter_list_options->ar_elements 	= $ar_elements;
										
										$autosearch_options_js .= 'service_autocomplete.build_search_sections_list('.json_encode($filter_list_options).');';
									}//end if ($ar_filter_options!==false)
							$autosearch_options_html .= '</div>';


						// Component options container
							$css_component_options_container = ($modo==='search') ? 'component_options_container_in_search_mode' : 'component_options_container';							
							$html_content .= '<div class="'.$css_component_options_container.'">';								
								# AUTOSEARCH_OPTIONS (add after button)
									$html_content .= $autosearch_options_html;
								
								# AUTOCOMPLETE SERVICE
									$autocomplete_wrapper_id  = 'aw_' . $identificador_unico;
									$css_autocomplete_wrapper = ($modo==='search') ? ' in_search_mode' : '';
									$html_content .= '<div class="autocomplete_wrapper '.$css_autocomplete_wrapper.'" id="'.$autocomplete_wrapper_id.'"></div>';
							$html_content .= '</div>';

						
						// Javascript. (Not init for slave source_mode)
							$html_content .= '<script>';
							# JS Init component
							$init_options = new stdClass();
								$init_options->component_name 	= $component_name;
								$init_options->wrapper_id 		= $id_wrapper;
								$init_options->cookie_name 		= $cookie_name;
								$init_options->limit 			= $limit;
								$init_options->min_length 		= $min_length;
								$init_options->uid 				= $identificador_unico;
							$html_content .= 'component_common.init('.json_encode($init_options).');';
							$html_content .= $autosearch_options_js; // Additional js calls
							$html_content .= '</script>';
						break;
				}//end switch ($source_mode)

			

			// Debug info
				if(SHOW_DEBUG===true) {
					$html_content .= "<div class=\"debug_info notes\">".str_replace('},', '},<br>', $dato_json ) ."</div>";
					$html_content .= "<div class=\"debug_info notes\">". json_encode($propiedades) ."</div>";
				}
			break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	if($modo!=='edit_in_list'){
		print $html_label;
	}
	print $html_content;



	print '</div>'; //wrap

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);


