	<?php

	# VISUALIZADOR HTML

	$html    = "<!-- TOOL ADMINISTRATION -->";
	$html   .= "<div class=\"wrap_tool wrap_tool_administration_page\">";



	#$html   .= $header_html;

	# TEST POSTGRES UNACCENT
	# Verify if postgres unaccent extension is available
		try {
			$strQuery = PHP_EOL.sanitize_query("SELECT * FROM \"matrix_projects\" WHERE section_id IS NOT NULL AND unaccent(datos#>>'{components, dd156 , valor}') ILIKE '%any%' LIMIT 1;");
			$result	  = JSON_RecordObj_matrix::search_free($strQuery);
			if (!$result) {
				$msg = 'Error on get unaccent extension';
				$html .= "<span class=\"error\">$msg</span>";
			}
		}catch (Exception $e) {
			$msg = 'Error on get unaccent extension - Exception: ' . $e->getMessage();
			$html .= $msg;
		}


	#
	# ADMIN UTILS
	$html   .= "<div class=\"content_data block-content-1\" >";

		# Check PHP shell_exec permissions
		try {
			$a = shell_exec("ls -l");
			if (empty($a)) {
				$html   .= "<div class=\"error\">WARNING. Your PHP shell_exec seems not work. Please review your server php config</div>";
				dump($a, ' shell_exec command ls -l ++ '.to_string($a));
			}
		}catch (Exception $e) {
			$msg = 'Error on exec command - Exception: ' . $e->getMessage();
			$html .= $msg;
		}
		

		# Check DB config
		if (empty(DB_BIN_PATH)) {
			if (defined('DEDALO_DB_MANAGEMENT') && DEDALO_DB_MANAGEMENT===false) {
				// nothing to do
				$html .= "<div class=\"\">Your DB config 'DEDALO_DB_MANAGEMENT' is false. This disalow some terminal db features like backup and update structure</div>";
			}else{
				$html .= "<div class=\"warning\">WARNING. Your DB config DB_BIN_PATH is empty. This can create problems in some servers</div>";
			}
		}

		# PANELS
			$html   .= "<div class=\"panel panel-primary\">";
			$html   .= "  <div class=\"panel-heading\">";
			$html   .= "    <h3 class=\"panel-title\"> ADMIN UTILS </h3>";
			$html   .= "  </div>";
			$html   .= "  <div class=\"panel-body\">";


			#
			# Long time process test
				if(SHOW_DEBUG===true) {
					$html   .= "<div class=\"panel_option\">";
					$html   .= "  <a href=\"javascript:;\" data-mode=\"make_backup\" onclick=\"tool_administration.long_time_process(this,event)\">Long time process</a>";
					$html   .= "</div>";#end panel_option
				}

			#
			# BACKUP FORCE
				$html   .= "<div class=\"panel_option\">";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span> ";
				if (defined('DEDALO_DB_MANAGEMENT') && DEDALO_DB_MANAGEMENT===false) {
					// Nothing to do
					$html .= "  <span>Backup</span>";
				}else{
					$html .= "  <a href=\"javascript:;\" data-mode=\"make_backup\" onclick=\"tool_administration.make_backup(this,event)\">".label::get_label('hacer_backup')."</a>";
				}
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <div id=\"make_backup_response\"></div>";
				$html   .= "  <div id=\"last_backup_info\">";
				$last_backup_info = $this->get_last_backup_info();
				$html   .= "Last backup file: <div>$last_backup_info</div>";
				$html   .= "  </div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option


			#
			# UPDATE STRUCTURE
				$html   .= "<div class=\"panel_option\">";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span> ";
				$from_remote = '';

				if (defined('STRUCTURE_FROM_SERVER') && STRUCTURE_FROM_SERVER===true && !empty(STRUCTURE_SERVER_URL)) {
					$url = STRUCTURE_SERVER_URL;
					$parse = parse_url($url);
					$from_remote = " from remote: <strong>".$parse['host']."</strong> ( url: $url - code: ".STRUCTURE_SERVER_CODE." )";

					if (defined('DEDALO_DB_MANAGEMENT') && DEDALO_DB_MANAGEMENT===false) {
						// Nothing to do
						$html .= "  <span>Structure</span>";
					}else{
						$html .= "  <a href=\"javascript:;\" data-mode=\"update_structure\" onclick=\"tool_administration.update_structure(this,event)\">".label::get_label('actualizar_estructura')."</a>".$from_remote;
					}

				}else if (!defined('STRUCTURE_FROM_SERVER') || STRUCTURE_FROM_SERVER===false) {
					$html   .= " <a> ".label::get_label('actualizar_estructura')." is a disabled for ".DEDALO_ENTITY." </a>";
				}


				$html   .= " <div class=\"panel_option_subcontent\">";
				$dedalo_structure_info = RecordObj_dd::get_termino_by_tipo(DEDALO_ROOT_TIPO,'lg-spa');
				$html   .= "  <div class=\"notes\">".json_encode( unserialize(DEDALO_PREFIX_TIPOS) )."</div>";
				$html   .= "  <div id=\"update_structure_response\">Current: $dedalo_structure_info</div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# UPDATE VERSION
				$html   .= "<div class=\"panel_option\"> ";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span> ";
				if(!empty($update_version)) {
					#$html   .= "  <div class=\"panel_option\">";
					#$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span> ";
					#$html   .= "  <a href=\"javascript:;\"
					#data-mode=\"update_version\"
					#data-update_version=\"$update_version\" onclick=\"tool_administration.update_version(this,event)\">".label::get_label('actualizar')." ".label::get_label('datos')."</a>";
					$html   .= "  <span>".label::get_label('actualizar')." ".label::get_label('datos')."</span>";

					#$html 	.= "  <span>[";
					#$html 	.= "  <span id=\"update_current_version\">DÃ©dalo ver: $current_dedalo_version</span> - ";
					#$html 	.= "  <span id=\"update_current_version\">User data in PostgreSQL ver: $current_version_in_db</span>";
					#$html 	.= "  ]</span>";

					$html   .= " <div class=\"panel_option_subcontent\">";
					$html 	.= "  <span id=\"update_current_version\" style=\"color:#DC1105\">Current data version: $current_version_in_db</span>";
					$html 	.= "  <span id=\"update_to_version\"> -----> $update_version</span>";


					include(dirname(dirname(__FILE__)) .'/updates/updates.php'); # Not once !
					$update_version_plain = str_replace('.', '', $update_version);
					#	dump($update_version_plain, ' update_version_plain ++ '.to_string());
					if (isset($updates->$update_version_plain->alert_update)) {
						foreach ($updates->$update_version_plain->alert_update as $akey => $avalue) {
							$notification = $avalue->notification;
							$command 	  = $avalue->command;
							$html   .= "<div class=\"alert_notification\"><div class=\"icon_warning\"></div>$notification</div>";
							$html   .= "<div class=\"alert_command\">$command</div>";
							#$html   .= '<pre>'. $akey .' - ' .print_r($avalue,true) .'</pre>';
						}
					}

					#if(SHOW_DEBUG===true) {
						// Show updates object (current target correspondence) with all config to apply to current update script
						$html   .= "<input type=\"button\" class=\"btn btn-default btn-sm btn_update\" value=\"Run all update data version actions\" ";
						$html   .= "data-mode=\"update_version\" ";
						$html   .= "data-update_version=\"$update_version\" ";
						$html   .= "onclick=\"tool_administration.update_version(this,event)\" ";
						$html   .= ">";
						# Actions list
						# dump($updates, '$updates->$update_version_plain ++ '.to_string());
						if (isset($updates->$update_version_plain)) {
							foreach ($updates->$update_version_plain as $key => $value) {

								if (is_object($value) || is_array($value)) {
									$i=0;
									foreach ($value as $vkey => $vvalue) {
										if($key==='alert_update') continue;
										if($i===0) $html   .= "<h6>$key</h6>";
										if(is_string($vvalue)) $vvalue = trim($vvalue);
										$html   .= '<pre class="command"><span class="vkey">'.($vkey+1).'</span><span class="vkey_value">'. print_r($vvalue, true) .'</span></pre>';
										$i++;
									}
								}
							}
						}
					#}
					$html   .= "  <div id=\"update_version_response\"></div>";
					$html   .= "  </div>";#end panel_option_subcontent

				}else{

					$html   .= "  <span>".label::get_label('actualizar')." ".label::get_label('datos')."</span> ";

					#$html 		.= "  <span id=\"update_current_version\">$current_dedalo_version</span>";
					#$html 		.= "  <span id=\"update_current_version\">Current data version: $current_version_in_db</span>";
					$html   	.= " <div class=\"panel_option_subcontent\">";

					#if($current_dedalo_version == $current_version_in_db) {
						$html 	.= "  <span class=\"glyphicon glyphicon-ok-circle\" aria-hidden=\"true\" style=\"color:#5cbd39\"></span> ";
						$html 	.= "  <span class=\"\" style=\"color:#5cbd39\">Data format is updated [$current_version_in_db]</span> ";
					#}else{
					#	$html 	.= "  <span class=\"glyphicon glyphicon-ban-circle\" aria-hidden=\"true\" style=\"color:#f72f19\"></span> ";
					#	$html 	.= "  <span id=\"update_current_version\">User data in PostgreSQL ver: $current_version_in_db</span> </br>";
					#	$html 	.= "  <span>ALERT: DON'T HAVE UPDATE!!</span> </br>";
					#}
					$html  		.= "  </div>";#end panel_option_subcontent
				}
				$html   .= "</div>";#end panel_option



			/*
			#
			# FORCE_UNLOCK_ALL_COMPONENTS
				$html   .= "<div class=\"panel_option\">";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= "  <a href=\"javascript:;\" data-mode=\"force_unlock_all_components\" onclick=\"tool_administration.force_unlock_all_components(this, event)\">".label::get_label('desbloquear_todos_los_componentes')."</a>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <div id=\"force_unlock_all_components_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option
				*/



			#
			# REMOVE_INVERSE_LOCATORS_IN_SECTION
				/*
				$html   .= "<div class=\"panel_option form-inline\">";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= "  <span>".label::get_label('remove_inverse_locators_in_section')." (old inverse locators, from section dato)</span>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <input type=\"text\" id=\"remove_inverse_locators_in_section_tables\" class=\"form-control input-sm\" style=\"width:50%\" autocomplete=\"off\" placeholder=\"".label::get_label('section_tipo')." (you can use sequences like 'rsc170,rsc197')\" />";
				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".label::get_label('borrar')."\" data-mode=\"remove_inverse_locators_in_section\" onclick=\"tool_administration.remove_inverse_locators_in_section(this, event)\" />";
				$html   .= "  <div id=\"remove_inverse_locators_in_section_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option
				*/



			#
			# PROPAGATE_RELATIONS
				$html   .= "<div class=\"panel_option form-inline\">";
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= "  <span>".label::get_label('propagar_relaciones')." (* for all tables)</span>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <input type=\"text\" id=\"propagate_relations_tables\" class=\"form-control input-sm\" style=\"width:50%\" autocomplete=\"off\" placeholder=\"".label::get_label('tablas')." (you can use sequences like 'matrix,matrix_list' or * to regenerate all tables and sequences)\" />";
				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"Ok\" data-mode=\"propagate_relations\" onclick=\"tool_administration.propagate_relations(this, event)\" />";
				$html   .= "  <div id=\"propagate_relations_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# BUILD_STRUCTURE_CSS
				$html   .= "<div class=\"panel_option\">";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <a href=\"javascript:;\" data-mode=\"build_structure_css\" onclick=\"tool_administration.build_structure_css(this,event)\">".label::get_label('build_structure_css')."</a>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <div id=\"build_structure_css_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# DELETE_COMPONENT_TIPO_IN_MATRIX_TABLE
				$html   .= "<div class=\"panel_option form-inline\"> ";

				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('delete_component_tipo_of_section_tipo')."</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <span title=\"section tipo\">".label::get_label('section_tipo')."</span>";
				$html   .= "  <input type=\"text\" id=\"delete_section_tipo\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"".label::get_label('section_tipo')."\" />";
				$html   .= "  <span title=\"component tipo\">".label::get_label('component_tipo')."</span>";
				$html   .= "  <input type=\"text\" id=\"delete_component_tipo\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"".label::get_label('component_tipo')."\" />";
				$html   .= "  <span title=\"Language\">".label::get_label('tool_lang')."</span>";
				$html   .= "  <input type=\"text\" id=\"delete_language\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"".label::get_label('tool_lang')."\" />";
				$html   .= "  <div class=\"checkbox\"><label><input type=\"checkbox\" id=\"delete_save\" class=\"form-control input-sm\" name=\"Save\" value=\"true\" /> <span>".label::get_label('salvar')."</span></label></div>";
				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".label::get_label('borrar')."\" data-mode=\"delete_component_tipo_in_matrix_table\" onclick=\"tool_administration.delete_component_tipo_in_matrix_table(this,event)\" />";
				$html   .= "  <div id=\"delete_component_tipo_in_matrix_table_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent

				$html   .= "</div>";#end panel_option



			#
			# SKIP_PUBLICATION_STATE_CHECK
				$checked = (isset($_SESSION['dedalo4']['config']['skip_publication_state_check']) && $_SESSION['dedalo4']['config']['skip_publication_state_check']==1) ? 'checked="checked"' : '';
				$html   .= "<div class=\"panel_option\">";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('skip_publication_state_check')."</span>";
				$html   .= " <div class=\"panel_option_subcontent panel_option_subcontent_inline\">";
				$html   .= "   <div class=\"checkbox\"><label>
								<input type=\"checkbox\" id=\"skip_publication_state_check\" class=\"\" name=\"skip_publication_state_check\" value=\"true\" $checked
								onchange=\"tool_administration.skip_publication_state_check(this, event)\"
								data-mode=\"skip_publication_state_check\">
								</label>
							  </div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= " <div id=\"skip_publication_state_check_response\"></div>";
				$html   .= "</div>";#end panel_option


				#
				# REMOVE AV TEMPORALS
				$html   .= "<div class=\"panel_option\">";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <a href=\"javascript:;\" data-mode=\"remove_av_temporals\" onclick=\"tool_administration.remove_av_temporals(this,event)\">".label::get_label('remove_av_temporals')."</a>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <div id=\"remove_av_temporals_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# RENUMERATE SECTION_ID
				$html   .= "<div class=\"panel_option form-inline\"> ";

				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('renumerar_secciones')."</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";

				$html   .= "  <span title=\"section tipo\">".label::get_label('section_tipo')."</span>";
				$html   .= "  <input type=\"text\" id=\"renumerate_section_tipo\" class=\"form-control input-sm\" style=\"width:120px;\" autocomplete=\"off\" placeholder=\"".'section_tipo'."\" />";

				$html   .= "  <span title=\"component tipo\">".label::get_label('section_id_start')."</span>";
				$html   .= "  <input type=\"text\" id=\"renumerate_section_id_start\" class=\"form-control input-sm\" style=\"width:90px;\" autocomplete=\"off\" placeholder=\"".'start'."\" />";

				$html   .= "  <span title=\"component tipo\">".label::get_label('section_id_end')."</span>";
				$html   .= "  <input type=\"text\" id=\"renumerate_section_id_end\" class=\"form-control input-sm\" style=\"width:90px;\" autocomplete=\"off\" placeholder=\"".'end'."\" />";

				$html   .= "  <span title=\"component tipo\">".label::get_label('counter_start')."</span>";
				$html   .= "  <input type=\"text\" id=\"renumerate_counter_start\" class=\"form-control input-sm\" style=\"width:110px;\" autocomplete=\"off\" placeholder=\"".'counter_start'."\" />";

				$html   .= "  <div class=\"checkbox\"><label><input type=\"checkbox\" id=\"renumerate_save\" class=\"form-control input-sm\" name=\"Save\" value=\"true\" /> <span>".label::get_label('salvar')."</span></label></div>";
				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".strip_tags(label::get_label('renumerate'))."\" data-mode=\"renumerate_sections\" onclick=\"tool_administration.renumerate_sections(this,event)\" />";
				$html   .= "  <div id=\"renumerate_sections_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent

				$html   .= "</div>";#end panel_option


			#
			# EXPORT HIERARCHY (TOPONOMY)
				$html   .= "<div class=\"panel_option form-inline\"> ";

				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('exportar_jerarquias').". Create files like es1.copy.gz in /install/import/hierarchy (for MASTER toponomy export)</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";

				$html   .= "  <span title=\"section tipo\">".label::get_label('section_tipo')."</span>";
				$html   .= "  <input type=\"text\" id=\"export_hierarchy_section_tipo\" class=\"form-control input-sm\" style=\"width:40.3%;\" autocomplete=\"off\" placeholder=\"section tipo like es1,es2 or * for all active\"/>";

				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".strip_tags(label::get_label('ok'))."\" data-mode=\"export_hierarchy\" onclick=\"tool_administration.export_hierarchy(this,event)\" />";
				$html   .= "  <div id=\"export_hierarchy_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent

				$html   .= "</div>";#end panel_option



			#
			# EXPORT_STRUCTURE_TO_JSON
				$html   .= "<div class=\"panel_option form-inline\"> ";

				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('exportar_estructura').". Create file 'structure.json'. You can apply tld filter using comma sepparated tld</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";

				// $html   .= "  <span title=\"TLD\">".label::get_label('tld')."</span>";
				// ar_tld
					$ar_tld			= backup::get_all_tld();
					$ar_tld_string	= implode(',',$ar_tld);
				$html   .= "  <input type=\"text\" id=\"ar_tld\" class=\"form-control input-sm\" style=\"width:90.3%;\" autocomplete=\"off\" placeholder=\"ar_tld like dd,rsc,hierarchy,oh\" value=\"$ar_tld_string\" />";

				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".strip_tags(label::get_label('export'))."\" data-mode=\"export_structure_to_json\" onclick=\"tool_administration.export_structure_to_json(this,event)\" />";
				
				// file structure_json_file_path
				$structure_json_file_path = (defined('STRUCTURE_DOWNLOAD_JSON_FILE') ? STRUCTURE_DOWNLOAD_JSON_FILE : STRUCTURE_DOWNLOAD_DIR) . '/' . 'structure.json';
				if (file_exists($structure_json_file_path)) {
					// $file_url	= DEDALO_PROTOCOL . $_SERVER['HTTP_HOST'] . DEDALO_LIB_BASE_URL . '/backup/backups_structure/srt_download' . '/' . 'structure.json';
					$file_url	= DEDALO_PROTOCOL . $_SERVER['HTTP_HOST'] . DEDALO_MEDIA_BASE_URL . '/import/files' . '/' . 'structure.json';
					$html   .= "<a href=\"$file_url\" target=\"_blank\">$file_url</a>";									
					$file_structure_size = format_size_units( filesize($structure_json_file_path) );					
					$html   .= "<div>File size: $file_structure_size</div>";

					// 
					$structure_data = json_decode( file_get_contents($structure_json_file_path) );
					$unique_ar_tld = [];
					foreach ($structure_data as $item) {
						if (!in_array($item->tld, $unique_ar_tld)) {
							$unique_ar_tld[] = $item->tld;
						}
					}
					$html   .= '<div>Available TLDs: '. implode(',', $unique_ar_tld) . '</div>';
				}

				$html   .= "  <div id=\"export_structure_to_json_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent

				$html   .= "</div>";#end panel_option



			#
			# IMPORT_STRUCTURE_FROM_JSON
				$html   .= "<div class=\"panel_option form-inline\"> ";

				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('importar_estructura').". Import file 'structure.json'. You can apply tld filter using comma sepparated tld or leave blank to import all</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";

				if (!defined('STRUCTURE_FROM_SERVER') || STRUCTURE_FROM_SERVER===false) {
					$html   .= "<div>Disable import structure from file</div>";
				}else{
					// check file
					if (!file_exists($structure_json_file_path)) {
						$html .= '<div class="warning">structure.json file not found in: '.$structure_json_file_path.'</div>';
					}else{			
						$html .= "  <input type=\"text\" id=\"import_ar_tld\" class=\"form-control input-sm\" style=\"width:90.3%;\" autocomplete=\"off\" placeholder=\"ar_tld like dd,rsc,hierarchy,oh\" value=\"\" />";
						$html .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".strip_tags(label::get_label('import'))."\" data-mode=\"import_structure_from_json\" onclick=\"tool_administration.import_structure_from_json(this,event)\" />";
					}
				}

				$html   .= "  <div id=\"import_structure_from_json_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent

				$html   .= "</div>";#end panel_option



			#
			# IMPORT DEDALO CSV FILES
				$html   .= "<div class=\"panel_option\">";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$url 	 = DEDALO_LIB_BASE_URL."/main/?m=tool_import_dedalo_csv&t=".DEDALO_AREA_ROOT_TIPO."&menu=1";
				$html   .= " <a href=\"$url\" data-mode=\"remove_av_temporals\">".label::get_label('tool_import_dedalo_csv')."</a>";
				$html   .= "</div>";#end panel_option


			#
			# TOOL METADATA
				$html   .= "<div class=\"panel_option\">";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$url 	 = DEDALO_LIB_BASE_URL."/main/?m=tool_metadata&t=".DEDALO_AREA_ROOT_TIPO."";
				$html   .= " <a href=\"$url\" target=\"_blank\" data-mode=\"remove_av_temporals\">".label::get_label('tool_metadata')."</a>";
				$html   .= "</div>";


			#
			# MOVE COMPONENT DATA
				$options = new stdClass();
				# Source options
				$options->source_section_tipo 	= null;
				$options->source_section_id 	= null; // array or null for all records
				$options->source_delete 		= false; // bool
				$options->source_portal_tipo 	= null;	// portal tipo where hook the target section
				# Target options
				$options->target_section_tipo 	= null;
				$options->target_section_id 	= null; // array or null for all records
				# Others
				$options->map_components 		= array(); // key is source component tipo. value is target component tipo

				$html   .= "<div class=\"panel_option form-inline\"> ";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('mover_datos_de_componentes')."</span>";

				$html   .= " <div class=\"panel_option_subcontent\">";

				$html   .= "  <input type=\"text\" title=\"source section tipo\" id=\"move_source_section_tipo\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"source section tipo\" />";
				$html   .= "  <input type=\"text\" title=\"source section id\" id=\"move_source_section_id\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"source section id\" />";
				$html   .= "  <input type=\"text\" title=\"source portal tipo\" id=\"move_source_portal_tipo\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"source portal tipo\" />";

				$html   .= "  <div class=\"checkbox\"><label><input type=\"checkbox\" id=\"move_source_delete\" class=\"form-control input-sm\" name=\"Source delete\" value=\"true\" checked=\"checked\" /> <span>".label::get_label('delete_source_data')."</span></label></div><br>";

				$html   .= "  <input type=\"text\" title=\"target section tipo\" id=\"move_target_section_tipo\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"target section tipo\" />";
				$html   .= "  <input type=\"text\" title=\"target section id\" id=\"move_target_section_id\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"target section id\" />";

				$html   .= "  <input type=\"text\" title=\"map components\" id=\"move_map_components\" class=\"form-control input-sm\" style=\"width: 100%;margin-top:2px;\" placeholder='map_components - json object like ". '{"oh16":"rsc23"}' ."' /><br>";

				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".label::get_label('mover')."\" data-mode=\"move_component_data\" onclick=\"tool_administration.move_component_data(this,event)\" />";
				$html   .= "  <div id=\"move_component_data_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# UPDATE_JER_FROM_4_0_TO_4_1
				$html   .= "<div class=\"panel_option form-inline\"> ";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= " <span>".label::get_label('update_jer_from_V3_to_4_5')."</span>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <span title=\"section tipo\">".label::get_label('tld')."</span>  &nbsp;";
				$html   .= "  <input type=\"text\" id=\"tld\" class=\"form-control input-sm\" autocomplete=\"off\" placeholder=\"tld2 like: ts\" />";
				$html   .= "  <div class=\"checkbox\"><label><input type=\"checkbox\" id=\"modelo\" class=\"form-control input-sm\" name=\"modelo\" value=\"true\" /> <span>".label::get_label('modelo')."</span></label></div>";
				$html   .= "  <input type=\"button\" class=\"btn btn-default btn-sm\" value=\"".label::get_label('actualizar')."\" data-mode=\"delete_component_tipo_in_matrix_table\" onclick=\"tool_administration.update_jer_from_4_0_to_4_1(this,event)\" />";
				$html   .= "  <div id=\"update_jer_from_4_0_to_4_1_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				$html   .= "</div>";#end panel_option



			#
			# API DOC
				$html   .= "<div class=\"panel_option form-inline\"> ";

				// API_WEB_USER_CODE | API_WEB_USER_CODE_MULTIPLE
					if(defined('API_WEB_USER_CODE_MULTIPLE')) {
						$api_web_user_code_multiple = API_WEB_USER_CODE_MULTIPLE;
					}else{
						// create unified array format from old config
						$api_web_user_code_multiple = [
							[
								'code' 	  => API_WEB_USER_CODE, // old fashion code value from config
								'db_name' => MYSQL_DEDALO_DATABASE_CONN // default database from config_db
							]
						];
					}
					foreach ($api_web_user_code_multiple as $key => $current_element) {
						$html .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
						$url   = DEDALO_LIB_BASE_URL."/publication/server_api/v1/docu/ui/?code=" . $current_element['code'] .'&db_name='.$current_element['db_name'];
						$html .= ' <a href="'.$url.'" target="_blank" data-mode="">API DOC --> '.$current_element['db_name'].'</a> <br>';
					}

				$html   .= "</div>";#end panel_option



			#
			# IMPORT GEONAMES
				$html   .= "<div class=\"panel_option form-inline\"> ";
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$url 	 = DEDALO_LIB_BASE_URL."/extras/geonames/import_geonames.php?code=";
				$html   .= " <a href=\"$url\" target=\"_blank\" data-mode=\"\">DOWNLOAD JSON DATA FROM GEONAMES API</a>";
				$html   .= "</div>";#end panel_option


			#
			# NAVIGATE RECORDS
				$html   .= '<div class=\Â¡"panel_option form-inline">';
				$html   .= " <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$url 	 = DEDALO_LIB_BASE_URL."/tools/tool_administration/html/navigate_records.php?section_tipo=";
				$html   .= " <a href=\"$url\" target=\"_blank\" data-mode=\"\">Navigate records</a>";				
				$html   .= '</div>';


			#
			# UPDATE DEDALO CODE
				$html   .= "<div class=\"panel_option form-inline\">";
				$html   .= "<span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span> ";				
				try {
					if (($_SERVER['SERVER_PORT']!=='80' && $_SERVER['SERVER_PORT']!=='443') || $_SERVER['REMOTE_ADDR']==='127.0.0.1') {
						$html .= '<div class="warning">Warning. You are in localhost !</div>';
					}
				} catch (Exception $e) {
				    echo 'Caught exception: ',  $e->getMessage(), "\n";
				}
				$html   .= "<input type=\"button\" class=\"btn btn-default btn-sm\" value=\"Update DÃ©dalo code\" data-mode=\"update_dedalo_code\" onclick=\"tool_administration.update_dedalo_code(this,event)\" /> ";
				$html   .= '<input type="checkbox" id="update_dedalo_code_check" value="true"> <label for="update_dedalo_code_check">Preview only</label>';
				$html   .= ' <span style="float:right"><a href="'.DEDALO_SOURCE_VERSION_URL.'" target="_blank">'.DEDALO_SOURCE_VERSION_URL.'</a></span>';
				$html   .= "<div id=\"update_dedalo_code_response\"></div>";
				// check zip lib is installed
				try {
					$test = new ZipArchive;
				} catch (Exception $e) {
					$html   .= '<div class="error">Â¡Caught exception: ' . $e->getMessage() . '</div>';
				}
				$html   .= "</div>";



		$html   .= "  </div>";//end panel-body
		$html   .= "</div>";//end panel-primary


	$html   .= "\n</div>";//end content_data block-content-1



	// SEARCH_QUERY_OBJECT TEST
		$html   .= "<div class=\"content_data\">";	// text_shadow_inset
			# PANELS
			$html   .= "<div class=\"panel panel-info\">";
			$html   .= "  <div class=\"panel-heading\">";
			$html   .= "    <h3 class=\"panel-title\"> SEARCH QUERY OBJECT TEST ENVIROMENT </h3>";
			$html   .= "  </div>";
			$html   .= "  <div class=\"panel-body\">";

				#
				# FORCE_UNLOCK_ALL_COMPONENTS
				$html   .= "<div class=\"panel_option\">";

				##
				# Text area
				$editor_id = 'json_editor';
				$html .= "<textarea class=\"css_input_text_json\" ";
				#$html .= "onchange=\"component_json.Save(this)\" ";
				$html .= "id=\"{$editor_id}\"  ";
				#$html .= "name=\"{$input_name}\" ";
				#$html .= "title=\"$html_title\" ";
				$html .= ">{}</textarea>";

				#
				# JSON EDITOR (EXPERIMENTAL)
				#$html .= "<div id=\"{$editor_id}_save_document\" class=\"saveDocument\">Save</div>";
				$html .= "<div id=\"{$editor_id}_container\" class=\"editor_json\"></div>";
				$html .= "<div id=\"convert_search_object_to_sql_query_response\" class=\"\"> convert_search_object_to_sql_query_response </div>";

				$html .= "<script>";
				$html .= "tool_administration.init_json_editor({\"editor_id\":\"{$editor_id}\"})";
				$html .= "</script>";
				/*
				$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
				$html   .= "  <a href=\"javascript:;\" data-mode=\"force_unlock_all_components\" onclick=\"tool_administration.force_unlock_all_components(this, event)\">".label::get_label('desbloquear_todos_los_componentes')."</a>";
				$html   .= " <div class=\"panel_option_subcontent\">";
				$html   .= "  <div id=\"force_unlock_all_components_response\"></div>";
				$html   .= " </div>";#end panel_option_subcontent
				*/
				$html   .= "</div>";#end panel_option


			$html   .= "  </div>";//end panel-body
			$html   .= "</div>";//end panel-info
		$html   .= "</div>";//end content_data



	#
	# USERS INFO
	$html   .= "\n<div class=\"content_data\" >";	// text_shadow_inset

		# PANELS
		$html   .= "<div class=\"panel panel-info\">";
		$html   .= "  <div class=\"panel-heading\">";
		$html   .= "    <h3 class=\"panel-title\"> USERS INFO </h3>";
		$html   .= "  </div>";
		$html   .= "  <div class=\"panel-body\">";

			#
			# FORCE_UNLOCK_ALL_COMPONENTS
			$html   .= "<div class=\"panel_option\">";
			$html   .= "  <span class=\"glyphicon glyphicon-cog\" aria-hidden=\"true\"></span>";
			$html   .= "  <a href=\"javascript:;\" data-mode=\"force_unlock_all_components\" onclick=\"tool_administration.force_unlock_all_components(this, event)\">".label::get_label('desbloquear_todos_los_componentes')."</a>";
			$html   .= " <div class=\"panel_option_subcontent\">";
			$html   .= "  <div id=\"force_unlock_all_components_response\"></div>";
			$html   .= " </div>";#end panel_option_subcontent
			$html   .= "</div>";#end panel_option


			#
			# ACTIVE_USERS
			if (defined('DEDALO_LOCK_COMPONENTS') && DEDALO_LOCK_COMPONENTS===true) {
				$html   .= "<div>";
				$html   .= " <span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span> ";
				$html   .= " <a href=\"javascript:;\" onclick=\"tool_administration.get_active_users(this)\">".label::get_label('usuarios_activos')."</a>";
				$html   .= "</div>";
				$html   .= "<div id=\"active_users\"></div>";
			}

		$html   .= "  </div>";//end panel-body
		$html   .= "</div>";//end panel-info

	$html   .= "</div>";//end content_data












	#
	# SYSTEM INFO
	$html   .= "\n<div class=\"content_data block-content-2\" >";	// text_shadow_inset


		$html   .= "<div class=\"panel panel-info\">";
		$html   .= "  <div class=\"panel-heading\">";
		$html   .= "    <h3 class=\"panel-title\"> SYSTEM INFO </h3>";
		$html   .= "  </div>";
		#$html   .= "  <div class=\"panel-body\">";
		$html   .= "<ul class=\"list-group panel-body\">";


			#
			# DEDALO VERSION
			$dedalo_structure_info = RecordObj_dd::get_termino_by_tipo(DEDALO_ROOT_TIPO,'lg-spa');
			$prefix_tipos  = unserialize(DEDALO_PREFIX_TIPOS);
			$dedalo_structure_info .= "\n".'Prefix: '. implode(",",$prefix_tipos);
			$info_database = pg_version(DBi::_getConnection());
			$html .= tool_administration::show_info( "Dedalo version",
													 DEDALO_VERSION,
													 "v".DEDALO_VERSION ." | Build: ".DEDALO_BUILD
													);


			#
			# DEDALO STRUCTURE
			$dedalo_structure_info = RecordObj_dd::get_termino_by_tipo(DEDALO_ROOT_TIPO);
			$prefix_tipos  = unserialize(DEDALO_PREFIX_TIPOS);
			$dedalo_structure_info .= "\n".'Prefix: '. implode(",",$prefix_tipos);
			$info_database = pg_version(DBi::_getConnection());
			$html .= tool_administration::show_info( "Dedalo structure review",
													 '',
													 $dedalo_structure_info
													);

			#
			#Â DEDALO DATA VERSION
			$info_database = pg_version(DBi::_getConnection());
			$html .= tool_administration::show_info( "Dedalo data version",
													 ' (matrix_update)',
													 $current_version_in_db
													);


			#
			#Â DATABASE
			$info_database = pg_version(DBi::_getConnection());
			$info_database['host'] = to_string(DEDALO_HOSTNAME_CONN);
			$html .= tool_administration::show_info( "Database",
													 $info_database['IntervalStyle']. " ". $info_database['server']. " ".DEDALO_HOSTNAME_CONN,
													 $info_database
													);

			#
			# PHP USER
			try {
				$processUser = get_current_user(); // $processUser = posix_getpwuid(posix_geteuid());
				$html .= tool_administration::show_info( "PHP user",
													 $processUser,
													 $processUser
													);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}

			
			#
			# SEE YOURSELF
			$command	= 'curl --max-time 1.5 -X GET "' . DEDALO_PROTOCOL . '' . DEDALO_HOST . DEDALO_LIB_BASE_URL . '/tools/tool_administration/html/test.php" ';
			$output		= '';
			try {
				$output = shell_exec($command);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}			
			$info = empty($output) ? '<error class="error">Error. Server can\'t connect with itself. Review your server host config to fix this issue</error>' : $output;
			$html .= tool_administration::show_info( "SEE YOURSELF",
													 $command,
													 $info
													);

			#
			# USER_LIMITS
			try {
				$user_limits = shell_exec("ulimit -a");
				$user_limits .= "-Hn\t\t\t\t     ".shell_exec("ulimit -Hn");
				$user_limits .= "-Sn\t\t\t\t     ".shell_exec("ulimit -Sn");
				$html .= tool_administration::show_info( "USER_LIMITS",
														 "".$processUser,
														 $user_limits
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}			
		

			#
			# DISK SPACE
			try {
				$html .= tool_administration::show_info( "DISK SPACE",
													 "DF COMMAND",
													 shell_exec("df -h")
													);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			


			#
			# MAX_INPUT_VARS
			$max_input_vars = ini_get("max_input_vars");
			$html .= tool_administration::show_info( "PHP Max. vars directive",
													'max_input_vars',
													 $max_input_vars
													);

			#
			# SESSION_CACHE_LIMITER
			$cache_limiter = session_cache_limiter();
			$html .= tool_administration::show_info( "PHP session_cache_limiter",
													'cache_limiter',
													 $cache_limiter
													);

			#
			# SESSION_CACHE_EXPIRE
			$cache_expire = session_cache_expire();
			$html .= tool_administration::show_info( "PHP session_cache_expire",
													'cache_expire in minutes',
													 $cache_expire ." (".((int)$cache_expire/60)." hours)"
													);

			#
			# SESSION.GC_MAXLIFETIME
			$gc_maxlifetime = ini_get("session.gc_maxlifetime");
			$html .= tool_administration::show_info( "PHP gc_maxlifetime",
													'gc_maxlifetime in secs',
													 $gc_maxlifetime ." (".($gc_maxlifetime/3600)." hours)"
													);

			#
			# SESSION_SAVE_PATH
			$session_save_path = session_save_path();
			$html .= tool_administration::show_info( "PHP session_save_path()",
													'session_save_path',
													 $session_save_path
													);

			#
			# ENCODING mb_internal_encoding
			$result = mb_internal_encoding();
			$html .= tool_administration::show_info( "PHP ENCODING",
													 "mb_internal_encoding",
													 $result
													);


			#
			# ENCODING mb_regex_encoding
			$result = mb_regex_encoding();
			$html .= tool_administration::show_info( "PHP ENCODING",
													 "mb_regex_encoding",
													 $result
													);



			#
			# HTTP HEADERS
			# it could be useful if you using nginx instead of apache
			try {

				# APACHE_VERSION
				if (function_exists('apache_get_version')) {
					$apache_version = apache_get_version();
				}else{
					$apache_version = shell_exec("httpd -v");
				}
				$apache_version = !empty($apache_version) ? $apache_version : "Unavailable (function 'apache_get_version' not exists)";
				$html .= tool_administration::show_info( "APACHE VERSION",
														 "Apache version",
														 $apache_version
														);
			}catch (Exception $e) {
				$html .= tool_administration::show_info( "APACHE INFO ERROR",
														 "Apache info exception",
														 "<span class=\"warning\">Exception on get apache info: " . $e->getMessage() . "</span>"
														);
			}

			#
			# FFMPEG
			try {
				$ffmpeg = shell_exec(DEDALO_AV_FFMPEG_PATH." -version ");
				$ffmpeg_config = shell_exec(DEDALO_AV_FFMPEG_PATH." -buildconf ");
				preg_match("/ffmpeg version (.*) Copyright/", $ffmpeg, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "FFMPEG",
														 $info ." - ". DEDALO_AV_FFMPEG_PATH,
														 $ffmpeg . $ffmpeg_config
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}


			#
			# FFPROBE
			try {
				$ffprobe = shell_exec(DEDALO_AV_FFPROBE_PATH." -version ");
				preg_match("/ffprobe version (.*) Copyright/", $ffprobe, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "PROBE",
														 $info ." - ". DEDALO_AV_FFPROBE_PATH,
														 $ffprobe
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			

			#
			# DEDALO_AV_FASTSTART_PATH
			try {
				$faststart = shell_exec(DEDALO_AV_FASTSTART_PATH." -v ");
				$html .= tool_administration::show_info( "FASTSTART",
														 DEDALO_AV_FASTSTART_PATH,
														 $faststart
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			

			#
			# IMAGE MAGICK
			try {
				$result = shell_exec(MAGICK_PATH."convert -version ");
				preg_match("/Version: ImageMagick (\S*)\s/", $result, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "IMAGE MAGICK",
														 $info ." - ". MAGICK_PATH,
														 $result
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			

			#
			# NODE JS
			try {
				$result = shell_exec(DEDALO_NODEJS." -v ");
				$html .= tool_administration::show_info( "NODE JS",
														 $result." - ".DEDALO_NODEJS,
														 $result
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			

			#
			# TINYMCE
			try {
				#$path = DEDALO_ROOT.'/lib/tinymce/js/tinymce/tinymce.min.js';
				$path = str_replace(DEDALO_ROOT_WEB, DEDALO_ROOT, TEXT_EDITOR_URL_JS);
				$f = fopen($path, 'r');
				$result = fgets($f);
				fclose($f);
				preg_match("/\/\/\s(\S*)\s/", $result, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "TINYMCE",
														 $info." - ".$path,
														 $result
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}


			#
			# JQUERY
			try {
				#$path = DEDALO_ROOT.'/lib/jquery/jquery.min.js';
				$path = str_replace(DEDALO_ROOT_WEB, DEDALO_ROOT, JQUERY_LIB_URL_JS);
				$f = fopen($path, 'r');
				$result = fgets($f);
				fclose($f);
				preg_match("/\*\!\sjQuery v(\S*)\s/", $result, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "JQUERY",
														 $info." - ".$path,
														 $result
														);
			}catch (Exception $e) {
				$msg = 'Error on exec command - Exception: ' . $e->getMessage();
				$html .= $msg;
			}
			


			#
			# PAPER
				#$path = DEDALO_ROOT.'/lib/paper/dist/paper-full.min.js';
				$path = str_replace(DEDALO_ROOT_WEB, DEDALO_ROOT, PAPER_JS_URL);
				$lines = file($path);//file in to an array
				$result = $lines[1]; //line 2
				preg_match("/js v(\S*)\s-/", $result, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "PAPER",
														 $info." - ".$path,
														 $result
														);


			#
			# LEAFLET
				#$path = DEDALO_ROOT.'/lib/leaflet/stable_versions/leaflet.js';
				$path = str_replace(DEDALO_ROOT_WEB, DEDALO_ROOT, LEAFLET_JS_URL);
				$lines = file($path);//file in to an array
				$result = $lines[1]; //line 2
				preg_match("/Leaflet ([0-9]\.[0-9]\.[0-9])\+.{1,12},/", $result, $output_array);
				$info = $output_array[1] ?? null;
				$html .= tool_administration::show_info( "LEAFLET",
														 $info." - ".$path,
														 $result
														);

			#
			# SECTIONS			
				$ar_section_tipo = RecordObj_dd::get_ar_terminoID_by_modelo_name('section');
				$ar_sections = array();
				foreach ($ar_section_tipo as $current_section_tipo) {
					#$approximate_row_coun = tool_administration::get_approximate_row_count($current_section_tipo);
					$ar_sections[$current_section_tipo] = RecordObj_dd::get_termino_by_tipo($current_section_tipo)." "; // ($approximate_row_coun)
				}
				$html .= tool_administration::show_info( "SECTIONS",
														 count($ar_section_tipo),
														 $ar_sections
														);			


			#
			# DB TABLES			
				$tables = (array)backup::get_tables();
				$ar_tables=array();
				foreach ($tables as $current_table) {
					$approximate_row_count = tool_administration::get_approximate_row_count($current_table);
					$ar_tables[] = "$current_table ($approximate_row_count)";
				}
				$html .= tool_administration::show_info( "DB TABLES",
														 "",
														 $ar_tables
														);


			#
			# DB DATA CHECK
			#if(SHOW_DEBUG===true) {
				require(DEDALO_LIB_BASE_PATH.'/db/class.data_check.php');
				$data_check = new data_check();
				$response 	= $data_check->check_sequences();
				if ($response->result!=true) {
					#debug_log(__METHOD__." $response->msg ".to_string(), logger::WARNING);
					if(SHOW_DEBUG===true) {
						#die("Error on ".$response->msg);
					}
				}
				$html .= tool_administration::show_info( "DB SEQUENCES STATE",
														 "",
														 $response->msg
														);
			#}


			#
			# DB DATA CHECK
			#if(SHOW_DEBUG===true) {
				#require_once(DEDALO_LIB_BASE_PATH.'/db/class.counter.php');
				$response 	= counter::check_counters();
				if ($response->result!==true) {
					#debug_log(__METHOD__." $response->msg ".to_string(), logger::WARNING);
					if(SHOW_DEBUG===true) {
						#die("Error on ".$response->msg);
					}
				}
				$html .= tool_administration::show_info( "DEDALO COUNTERS STATE",
														 "",
														 $response->msg
														);
			#}


		$html   .= "</ul>";//end list-group


		#$html   .= "  </div>";//end panel-body
		$html   .= "</div>";//end #system_info_content

	$html .= "</div><!-- /content_data block-content-2 -->";









	#
	# PHP INFO
	$html   .= "<div class=\"content_data block-content-3\" >";
	$html   .= "<div class=\"panel panel-info\">";

		$html   .= "<div class=\"panel-heading\" onclick=\"resizeIframe(document.getElementById('phpinfo'))\">";
		$html   .= "<h3 class=\"panel-title\"> PHP INFO </h3>";
		$html   .= "</div>";

		$html   .= "<ul class=\"list-group panel-body\" style=\"display:none\">";

			#
			# PHPINFO
			$html   .= "<li>";
			$html   .= "<iframe id=\"phpinfo\" ";
			$html   .= "src=\"".DEDALO_LIB_BASE_URL."/tools/tool_administration/html/info.php\" ";
			$html   .= "frameborder=\"0\" ";
			$html   .= "scrolling=\"no\" ";
			#$html   .= "onload=\"resizeIframe(this)\" ";
			$html   .= "></iframe>";
			$html   .= "</li>";

		$html   .= "</ul>";//end list-group

	$html   .= "</div>";//end #php_info_content
	$html .= "</div><!-- /content_data block-content-3 -->";



	$html .= "</div><!-- /wrap_tool -->"; //wrap_tool



	print $html;


