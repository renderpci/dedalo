<?php

	# VISUALIZADOR HTML
	

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);


	$wrap_style = isset($wrap_style) ? $wrap_style : '';
	print '<div class="wrap_component css_wrap_input_text wrap_component_'.$modo.' wrap_component_'.$tipo.'" id="'.$id_wrapper.'" ';
	print 'style="'.$wrap_style.'" ';
	print 'data-tipo="'.$tipo.'" ';
	print 'data-lang="'.$lang.'" ';
	print 'data-section_tipo="'.$section_tipo.'" ';
	print 'data-parent="'.$parent.'" ';
	print 'data-modo="'.$modo.'" ';
	print 'data-dato=\''.$dato_json.'\' ';
	print 'data-unique=\''.$unique_json.'\' ';
	if($unique_disable_save_json === true){
		print 'data-is_saveable="false" ';
	}else{
		print 'data-is_saveable="true" ';
	}
	print 'data-component_name="'.$component_name.'" ';
	print 'data-component_info=\''.$component_info.'\' ';
	print '>';
	

	# LABEL
	$html_label = component_common_draw::draw_label($this);


	# LANG FAST SWITCHER
	/*
	if ($this->traducible==='si') {
		$html_label .= component_common_draw::draw_select_fast_lang_switch($id_wrapper, $lang, 'select_fast_lang_switch');
	}*/
	

	# CONTENIT
	$html_content = '';
	switch($permissions) {

		case 0 :
				$html_content .= "";
				break;

		case 1 :
				foreach ($dato as $value) {
					$html_content .= '<span class="css_span_dato">'.$value.'</span>';
				}
				break;

		case 2 :
		case 3 :
				# Dato reference default lang
				$fix_tool_lang = false;
				if ($modo!=='tool_lang' && !empty($default_component)) {
					#$html_content .= " <div class=\"dato_refecence_default_lang\">$dato_reference_lang</div>";
					# Fijamos el lenguaje actual como el de destino para el tool_lang
					# $html_content .= "<script>set_localStorage('last_target_lang','$lang');</script>";
					$fix_tool_lang = true;
					$tool_lang = new tool_lang($default_component,'button');
						#dump($tool_lang,'$tool_lang');
					$html_content .= $tool_lang->get_html();
				}

				# Avoid autocomplete input username in Users section
				#$remove_autocomplete = null;
				#if ($section_tipo===DEDALO_SECTION_USERS_TIPO) {
				#	$remove_autocomplete = "readonly onfocus=\"this.removeAttribute('readonly');component_common.select_wrap(null,'$id_wrapper');\"";
				#}else{
				#	$remove_autocomplete = '';//"onfocus=\"component_common.select_wrap(null,'$id_wrapper')\";\"";
				#	$remove_autocomplete = "onfocus=\"component_common.select_wrap_on_tab_focus(this,'$id_wrapper')\"";
				#}

				# Read only mode (set in propiedades)
					$read_only = (
						(isset($propiedades->read_only) && ($propiedades->read_only===true || $propiedades->read_only==='read_only')) ||
						(isset($role) && $role==='source_lang')
						)
						? 'readonly="readonly" '
						: '';					

				# Button add
				if (isset($propiedades->multi_value) && $propiedades->multi_value==true) {
					$html_content .= "<div class=\"css_button_generic btn_add_input_text\" onclick=\"component_input_text.add_input_text(this)\">";
					$html_content .= "<div class=\"link css_input_text_add\"></div>";
					$html_content .= "</div>";
				}

				# dato_view
				$dato_view = empty($dato) ? array("") : $dato;
				$html_content .= '<ul>';
				foreach ($dato_view as $key => $value) {
					# Fix issues with quotes
					$value = htmlentities($value);

					$html_content .= '<li>';

					$html_content .= '<input class="css_input_text" type="text" ';
					if($context_name==='default') {
						$html_content .= 'onchange="component_input_text.Save(this)" ';
					}
					if($unique === true){
						$html_content .= 'onkeyup="component_input_text.is_unique(this)" ';
					}

					$html_content .= 'id="'.$id_wrapper.'_input_'.$key.'" ';
					$html_content .= 'name="'.$input_name.'" ';
					$html_content .= 'value="'.$value.'" ';
					$html_content .= 'data-value_original="'.$value.'" ';
					$html_content .= 'title="'.$html_title.'" ';
					$html_content .= $read_only;
					$html_content .= 'autocomplete="off" ';
					#$html_content .= $remove_autocomplete.' '; // Events to remove autocomplete safari behavior
					$html_content .= 'data-tipo="'.$tipo.'" ';
					$html_content .= 'data-section_tipo="'.$section_tipo.'" ';
					$html_content .= 'data-parent="'.$parent.'" ';
					$html_content .= 'data-lang="'.$lang.'" ';
					$html_content .= 'data-mandatory=\''.$mandatory_json.'\' ';
					$html_content .= '/>';
					
					$html_content .= '</li>'; // tabindex=\"1\"

				}//end foreach
				$html_content .= '</ul>';			
				

				#$html_content .= "<script>setAttribute(“autocomplete”,”off”)</script>";

				#readonly onfocus=\"this.removeAttribute('readonly');\"

				#$html_content .= " <span  class=\"css_span_log\"></span>";
				#$html_content .= " <span  class=\"css_span_ejemplo\">$ejemplo</span>";


				$RecordObj_dd = new RecordObj_dd($tipo);
				$propiedades  = json_decode($RecordObj_dd->get_propiedades());
				if (isset($propiedades->with_lang_versions) && $propiedades->with_lang_versions===true) {
					
					$component 			= component_common::get_instance($component_name,
																		 $tipo,
																	 	 $parent,
																	 	 $modo,
																		 DEDALO_DATA_LANG,
																	 	 $section_tipo);
					#$add_value = component_common::extract_component_value_fallback($component);
					$add_value = $component->get_valor($lang);
					if (!empty($add_value)) {
						$html_content .= ' <span class="">'.$add_value.'</span>';
					}
				}



				if(SHOW_DEBUG===true) {
					$html_content .= '<span class="debug_info notes">'.$dato_json.'</span>';
				}

				# JS
				if($context_name==='default') {
					
					#
					# JS Init component
					$html_content .= '<script>';
					# Init component
					$init_options = new stdClass();
						$init_options->component_name 		= $component_name;
						$init_options->wrapper_id 			= $id_wrapper;
						$init_options->uid 					= $identificador_unico;
						$init_options->modo 				= $modo;
						$init_options->propiedades 			= $propiedades;
						$init_options->traducible 			= $traducible;
						$init_options->with_lang_versions 	= $with_lang_versions;
					$html_content .= 'component_common.init('.json_encode($init_options).');';

					// First test on load element
					if ($mandatory===true) {
						$html_content .= "component_input_text.mandatory('{$id_wrapper}');";
					}
					if ($fix_tool_lang===true) {
						$html_content .= "set_localStorage('last_target_lang','$lang');";
					}
					$html_content .= '</script>';
				}
				
				break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	if($modo!=='edit_in_list'){
		print $html_label;
	}		
	print $html_content;


	print '</div>'; //wrap

	

	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);

	
